# Code 8: Generate a genetic algorithm code for generating the random value for the discrete & continuous function mentioned in the remark column.
import random


# Define a fitness function (dummy function for demonstration purposes)
def fitness(individual):
    # In a real scenario, this function should evaluate the quality of the individual
    return sum(individual)


# Genetic Algorithm parameters
population_size = 50
generations = 100
mutation_rate = 0.01


# Initialize the population
def initialize_population(data, population_size):
    population = []
    for _ in range(population_size):
        individual = []
        for index, row in data.iterrows():
            try:
                if row['Remark'] == 'Discrete':
                    value = random.randint(int(row['Min']), int(row['Max']))
                else:
                    value = random.uniform(row['Min'], row['Max'])
                individual.append(value)
            except KeyError as e:
                print(f"KeyError: {e} in row {index}")
                print(row)
                raise e
        population.append(individual)
    return population


# Selection
def select(population):
    population.sort(key=fitness, reverse=True)
    return population[:int(len(population)/2)]


# Crossover
def crossover(parent1, parent2):
    crossover_point = random.randint(0, len(parent1) - 1)
    child1 = parent1[:crossover_point] + parent2[crossover_point:]
    child2 = parent2[:crossover_point] + parent1[crossover_point:]
    return child1, child2


# Mutation
def mutate(individual, data):
    for i in range(len(individual)):
        if random.random() < mutation_rate:
            if data.iloc[i]['Remark'] == 'Discrete':
                individual[i] = random.randint(int(data.iloc[i]['Min']), int(data.iloc[i]['Max']))
            else:
                individual[i] = random.uniform(data.iloc[i]['Min'], data.iloc[i]['Max'])


# Main Genetic Algorithm loop
def genetic_algorithm(data, population_size, generations):
    population = initialize_population(data, population_size)

    for _ in range(generations):
        selected = select(population)
        next_generation = []

        while len(next_generation) < population_size:
            parent1, parent2 = random.sample(selected, 2)
            child1, child2 = crossover(parent1, parent2)
            mutate(child1, data)
            mutate(child2, data)
            next_generation.extend([child1, child2])

        population = next_generation

    return select(population)


# Run the Genetic Algorithm
best_individuals = genetic_algorithm(data, population_size, generations)
best_individuals[:5]  # Display the top 5 best individuals
